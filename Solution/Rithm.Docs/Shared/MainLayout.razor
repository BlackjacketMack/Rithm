@using MudBlazor.Utilities;
@inherits LayoutComponentBase
@inject NavigationManager _navigationManager;

<MudThemeProvider Theme="@_theme" />
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="1" Color="@Color.Primary">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <a href="/" style="color:white !important;"><MudText Typo="Typo.h5" Class="ml-3 logo-text">Rithm <span class="logo-subtext">(docs)</span></MudText></a>
        <MudSpacer />
        <MudButton StartIcon="@Icons.Material.Filled.Search" Class="ml-0" Color="Color.Inherit" IconClass="mx-auto" OnClick="showSearchClicked" />
        @if (_searchVisible)
        {
            <div class="flex-grow-1">
                <MudTextField @bind-Value="@_search" @bind-Value:after="@searchChanged" Label="Search" Variant="Variant.Filled" Style="background-color: var(--mud-palette-primary-lighten);" Margin="@Margin.Dense"></MudTextField>
            </div>
        }
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Href="https://github.com/BlackjacketMack/Rithm" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <div class="docs pa-4 pa-md-8">@Body</div>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;
    private string _search;
    private bool _searchVisible;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private RithmDocsTheme _theme = new();

    public class RithmDocsTheme : MudTheme
    {
        public RithmDocsTheme()
        {
            Typography = new Typography
                {
                    Default = new DefaultTypography { FontSize = "1rem" },
                    H1 = new H1Typography { FontSize = "2.75rem" },
                    H2 = new H2Typography { FontSize = "2.5rem" },
                    H3 = new H3Typography { FontSize = "2.25rem" },
                    H4 = new H4Typography { FontSize = "2rem" },
                    H5 = new H5Typography { FontSize = "1.75rem" },
                    H6 = new H6Typography { FontSize = "1.5rem" },
                    Subtitle1 = new Subtitle1Typography { FontSize = "1.25rem" },
                    Subtitle2 = new Subtitle2Typography { FontSize = "1rem" }
                };

            PaletteLight = new PaletteLight
            {
                    Primary = new MudColor("#68869f"),
                    Secondary = new MudColor("#9f8168"),
                    Tertiary = new MudColor("#689f9d"),
            };

            PaletteDark = new PaletteDark
                {
                    Primary = new MudColor("#78909c"),
                    Secondary = new MudColor("#9c8478"),
                    Tertiary = new MudColor("#787e9c")
                };

            PaletteLight.PrimaryLighten = PaletteLight.Primary.ColorLighten(.16).Value;
            PaletteLight.SecondaryLighten = PaletteLight.Secondary.ColorLighten(.16).Value;
            PaletteLight.TertiaryLighten = PaletteLight.Tertiary.ColorLighten(.16).Value;
        }
    }

    private void searchChanged()
    {
        if (_search == null) return;

        _navigationManager.NavigateTo($"/search/{_search}");
    }

    private void showSearchClicked()
    {
        _searchVisible = !_searchVisible;
    }
}